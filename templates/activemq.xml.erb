<!--
      For more information about what MCollective requires in this file,
      see http://docs.puppetlabs.com/mcollective/deploy/middleware/activemq.html
-->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

<% if @webconsole_real -%>
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
                <value>file:<%= @home_real %>/activemq/conf/credentials.properties</value>
        </property>
    </bean>
<% end -%>

    <!--
        The <broker> element is used to configure the ActiveMQ broker.
        In a network of brokers, the brokerName attribute must be unique.
    -->

    <!--
      WARNING: The elements that are direct children of <broker> MUST BE IN
      ALPHABETICAL ORDER. This is fixed in ActiveMQ 5.6.0, but affects
      previous versions back to 5.4.
      https://issues.apache.org/jira/browse/AMQ-3570
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="<%= scope.lookupvar('::fqdn') %>" useJmx="true">
        <!--
            MCollective sends replies on uniquely-named, single-use queues
            with names like mcollective.reply.<UNIQUE ID>. These have to be
            deleted after about five minutes, lest they clog up ActiveMQâ€™s
            available memory.

            producerFlowControl is set to false because otherwise it can cause
            MCollective servers to appear blocked when there's heavy traffic.
        -->
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="false" />
                <policyEntry queue="*.reply.>" gcInactiveDestinations="true" inactiveTimoutBeforeGC="300000" />
              </policyEntries>
            </policyMap>
        </destinationPolicy>

        <!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

<% if @mq_cluster_brokers_real.length > 1 -%>
        <!--
          Configure network connectors for a network of brokers. The
          MCollective ActiveMQ connector uses TWO bi-directional
          connectors per link, because the short-lived reply queues
          require conduitSubscriptions be set to false.

          In this config, all brokers are connected to each other.
        -->
        <networkConnectors>
  <%- @mq_cluster_brokers_real.each do |broker| -%>
    <%- if broker != scope.lookupvar('::fqdn') -%>
          <networkConnector
                name="<%= scope.lookupvar('::fqdn') %>-<%= broker %>-topics"
                uri="static:(tcp://<%= broker %>:61616)"
                userName="<%= @mq_cluster_username_real %>"
                password="<%= @mq_cluster_password_real %>"
                duplex="false"
                decreaseNetworkConsumerPriority="true"
                networkTTL="2"
                dynamicOnly="true">
                <excludedDestinations>
                        <queue physicalName=">" />
                </excludedDestinations>
          </networkConnector>
          <networkConnector
                name="<%= scope.lookupvar('::fqdn') %>-<%= broker %>-queues"
                uri="static:(tcp://<%= broker %>:61616)"
                userName="<%= @mq_cluster_username_real %>"
                password="<%= @mq_cluster_password_real %>"
                duplex="false"
                decreaseNetworkConsumerPriority="true"
                networkTTL="2"
                dynamicOnly="true"
                conduitSubscriptions="false">
                <excludedDestinations>
                        <topic physicalName=">" />
                </excludedDestinations>
          </networkConnector>
    <%- end -%>
  <%- end -%>
        </networkConnectors>
<%- end -%>

        <!--
            Configure message persistence for the broker. MCollective requires
            this in a network of brokers, where it's used to prevent duplicate
            messages.

            The default persistence mechanism is the KahaDB store (identified
            by the kahaDB tag). For more information, see:

            http://activemq.apache.org/persistence.html
        -->
        <persistenceAdapter>
                <kahaDB directory="<%= @home_real %>/activemq/data/kahadb"/>
        </persistenceAdapter>

        <plugins>
          <statisticsBrokerPlugin/>

          <!--
            This configures the users and groups used by this broker. Groups
            are referenced below, in the write/read/admin attributes
            of each authorizationEntry element.
          -->
          <simpleAuthenticationPlugin>
            <users>
<% if @mq_cluster_brokers_real.length > 1 -%>
              <!-- Used for inter-broker communication in a network of brokers -->
              <authenticationUser username="<%= @mq_cluster_username_real %>" password="<%= @mq_cluster_password_real %>" groups="admins,everyone"/>
<% end -%>
              <!-- MCollective -->
              <authenticationUser username="<%= @mq_mcollective_username_real %>" password="<%= @mq_mcollective_password_real %>" groups="mcollective,everyone"/>
              <!-- ActiveMQ Administration -->
              <authenticationUser username="<%= @mq_admin_username_real %>" password="<%= @mq_admin_password_real %>" groups="mcollective,admins,everyone"/>
            </users>
          </simpleAuthenticationPlugin>

          <!--
            Configure which users are allowed to read, write and create (admin) topics.
            Permissions are organized by group; groups are configured above, in the
            authentication plugin.

            With the rules below, both servers and admin users belong to group
            mcollective, which can both issue and respond to commands. For an
            example that splits permissions and doesn't allow servers to issue
            commands, see:
            http://docs.puppetlabs.com/mcollective/deploy/middleware/activemq.html#detailed-restrictions
          -->
          <authorizationPlugin>
            <map>
              <authorizationMap>
                <authorizationEntries>
                  <authorizationEntry queue=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry topic=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry topic="mcollective.>" write="mcollective" read="mcollective" admin="mcollective" />
                  <authorizationEntry queue="mcollective.>" write="mcollective" read="mcollective" admin="mcollective" />
                  <!--
                    The advisory topics are part of ActiveMQ, and all users need access to them.
                    The "everyone" group is not special; you need to ensure every user is a member.
                  -->
                  <authorizationEntry topic="ActiveMQ.Advisory.>" read="everyone" write="everyone" admin="everyone"/>
                </authorizationEntries>
              </authorizationMap>
            </map>
          </authorizationPlugin>
        </plugins>

       <!--
            The systemUsage controls the maximum amount of space the broker will
            use before slowing down producers. For more information, see:
            http://docs.puppetlabs.com/mcollective/deploy/middleware/activemq.html#memory-and-temp-usage-for-messages-systemusage
        -->
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="20 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. 

            For more information, see:
            http://docs.puppetlabs.com/mcollective/deploy/middleware/activemq.html#transport-connectors
        -->
        <transportConnectors>
<% if @mq_cluster_brokers_real.length > 1 -%>
            <!-- 'openwire' is required for inter-broker communication in a network of brokers -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" />
<% end -%>
            <!-- MCollective uses the 'stomp' protocol -->
            <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:61613" />
            <!-- If using encryption, uncomment this and comment out the previous connector:
            <transportConnector name="stomp+ssl" uri="stomp+ssl://0.0.0.0:61614?needClientAuth=true" />
            -->
        </transportConnectors>
    </broker>

<% if @webconsole_real -%>
    <!--
        Enable web consoles, REST and Ajax APIs and demos.
        It also includes Camel (with its web console); see ${ACTIVEMQ_HOME}/conf/camel.xml for more info.

        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
    <import resource="jetty.xml"/>
<% end -%>
</beans>
